plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

def getVersionName() {
    return VERSION_NAME
}

def getVersionCode() {
    return VERSION_CODE
}

ext.isReleaseVersion = !getVersionName().endsWith('SNAPSHOT')

android {
    compileSdkVersion 34
    buildToolsVersion "34.0.0"

    ndkVersion "25.2.9519653"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 34
        versionCode getVersionName()
        versionName getVersionCode()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    module = "../rust"
    libname = "lightarti_rest"
    targets = ["arm", "arm64", "x86", "x86_64"]
    profile = 'release'
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'org.apache.commons:commons-compress:1.21'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

tasks.whenTaskAdded { task ->
    if (task.name in ['javaPreCompileDebug', 'javaPreCompileRelease', 'mergeReleaseJniLibFolders']) {
        task.dependsOn 'cargoBuild'
    }
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidSourcesJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact androidSourcesJar

                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = getVersionName()

                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }
                }
            }
        }
        repositories {
            maven {
                url = isReleaseVersion ? RELEASE_REPOSITORY_URL : SNAPSHOT_REPOSITORY_URL
                credentials {
                    username findProperty("nexusUsername")
                    password findProperty("nexusPassword")
                }
            }
        }
    }
}

signing {
    required {
        isReleaseVersion// && gradle.taskGraph.hasTask("publish")
    }
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}

tasks.withType(Sign) {
    onlyIf {
        isReleaseVersion
    }
}
